import {
  RouteProps,
  RouteComponentProps,
  match as Match,
} from 'react-router-dom';
import { HelmetData } from 'react-helmet';
import { Request, Response } from 'express';
import { History, Location } from 'history';

export interface CtxBase {
  req?: Request;
  res?: Response;
  history?: History;
  location?: Location;
  scrollToTop?: ScrollToTop;
}

export interface Ctx<P> extends CtxBase {
  match: Match<P>;
}

export interface AsyncComponent {
  getInitialProps: (props: Ctx<any>) => any;
  load?: () => Promise<React.ReactNode>;
  getChunkName: () => string | undefined;
}

export type AsyncRouteComponentType<Props> = React.ComponentType<Props> &
  AsyncComponent;

/**
 * this type handles the component type in the route config object
 * {
 *   path: "/",
 *   exact: true,
 *   component: ReactComponent <- AsyncRouteableComponent
 * }
 */
export type AsyncRouteableComponent<Props = any> =
  // re-exported from react-router (RouteComponentProps)
  | React.ComponentType<RouteComponentProps<Props>>
  | React.ComponentType<Props>
  // After.js Page Component (getInitialProps and ...)
  | AsyncRouteComponentType<RouteComponentProps<Props>>
  | AsyncRouteComponentType<Props>;

export interface AsyncRouteComponentState {
  Component: AsyncRouteableComponent | null;
}

export interface AsyncRouteProps<Props = any> extends RouteProps {
  path?: string;
  Placeholder?: React.ComponentType<any>;
  component: AsyncRouteableComponent<Props>;
  redirectTo?: string;
}

export type ScrollToTop = React.RefObject<boolean>;

// result of getInitialProps
export type InitialData = Promise<unknown>[];

export interface InitialProps {
  match?: AsyncRouteProps;
  data: InitialData;
}

export interface AfterClientData {
  scrollToTop: ScrollToTop;
}

// <AfterData /> will send this object
export interface ServerAppState {
  afterData: AfterClientData;
  initialData: InitialData;
}

// Result of Document
export interface RenderPageResult {
  html: string;
  helmet: HelmetData;
}

// TransitionBehavior
export type TransitionBehavior = 'blocking' | 'instant';

// Document.js
export interface DocumentgetInitialProps<T = RenderPageResult> {
  req: Request;
  res: Response;
  helmet: HelmetData;
  assets: Assets;
  data: ServerAppState;
  renderPage: () => Promise<T>;
  match: Match | null;
  scripts: string[];
  styles: string[];
  scrollToTop: ScrollToTop;
}

export type DocumentProps<T = RenderPageResult> = Omit<
  DocumentgetInitialProps<T>,
  'req' | 'res' | 'renderPage' | 'scrollToTop'
> &
  T;
export type AfterContext = DocumentProps;

// getAssets utility function
export interface GetAssetsParams {
  chunks: Chunks;
  route?: AsyncRouteProps<any>;
}

// ES Module type
export type Module<P> =
  | {
      default?: P;
      [x: string]: any;
    }
  | {
      exports?: P;
      [x: string]: any;
    };

// assets.json that generated by razzle
export interface Assets {
  [name: string]: {
    [ext: string]: string;
  };
}

// chunks.json that generated by razzle
export interface Chunks {
  [key: string]: {
    css: string[];
    js: string[];
  };
}
